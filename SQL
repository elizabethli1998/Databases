/*ProjectSQL by Elizabeth Li */
use db363elli1998;

create  table  Person  
(
	Name char (20),
    ID char (9) not null,
    Address char (30),
    DOB date,
   Primary key (ID) 
);

create table Instructor 
(
	
	InstructorID char (9) not null,
	Rank char (12),
	Salary int,
	Primary key (InstructorID),
    Foreign Key(InstructorID) references Person(ID) 

);

create table Student   
(
	StudentID char (9) not null,
    Classification char (10),
    GPA double,
    MentorID char(9) not null, 
    CreditHours int,
    Primary Key (StudentID),
    Foreign Key(StudentID) references Person(ID),
    Foreign Key(MentorID) references Instructor(InstructorID)
    
);

create table Course 
(
	CourseCode char(6) not null,
    CourseName char(50),
	PreReq char(6)
);

create table Offering
(
	CourseCode char(6) NOT NULL,
    SectionNo int NOT NULL,
	InstructorID char(9) not null,
   primary key(CourseCode, SectionNo),
   Foreign Key (InstructorID) references Instructor(InstructorID)
);

create table Enrollment 
(
	CourseCode char(6) NOT NULL, 
	SectionNo int NOT NULL, 
	StudentID char(9) NOT NULL references Student, 
	Grade char(4) NOT NULL,
	primary key (CourseCode, StudentID),
    Foreign Key (CourseCode, SectionNo) references Offering(CourseCode, SectionNo)
);

load xml local infile '/Users/elizabethli/Documents/COMS363/UniversityXML//Person.xml'
into table Person
rows identified by '<Person>';

load xml local infile '/Users/elizabethli/Documents/COMS363/UniversityXML//Instructor.xml'
into table Instructor
rows identified by '<Instructor>';

load xml local infile '/Users/elizabethli/Documents/COMS363/UniversityXML//Student.xml'
into table Student
rows identified by '<Student>';

load xml local infile '/Users/elizabethli/Documents/COMS363/UniversityXML//Course.xml'
into table Course
rows identified by '<Course>';

load xml local infile '/Users/elizabethli/Documents/COMS363/UniversityXML//Offering.xml'
into table Offering
rows identified by '<Offering>';

load xml local infile '/Users/elizabethli/Documents/COMS363/UniversityXML//Enrollment.xml'
into table Enrollment
rows identified by '<Enrollment>';

/*13 */  
SELECT  StudentID, MentorID FROM Student
Where GPA > 3.8 AND (Classification = 'Junior' OR Classification = 'Senior');  

/*14 */ 
 SELECT DISTINCT CourseCode, SectionNo FROM Offering, Student
Where Classification = 'Sophomore';  

/*15/*/
SELECT distinct Person.Name, Salary FROM Instructor, Student, Person
Where Student.Classification = 'Freshman' AND InstructorID = Student.MentorID and Student.MentorID = Person.ID;

/* 16*/
SELECT SUM(Salary) FROM Instructor
WHERE InstructorID not in(select Offering.InstructorID from Offering);

/* 17*/
SELECT DISTINCT Person.Name, DOB FROM Student, Person
WHERE ID = Student.StudentID and Year(DOB) = 1976;

/*18 */
SELECT distinct Person.Name, Rank FROM Person, Instructor WHERE Instructor.InstructorID not in (SELECT InstructorID FROM Offering) and Instructor.InstructorID = Person.ID and Instructor.InstructorID not in(SELECT MentorID FROM Student);

/* 19 */
SELECT distinct Person.Name, DOB, ID FROM Person, Student WHERE Person.ID = Student.StudentID and (DOB=(SELECT MAX(DOB) FROM Person));

/* 20 */
SELECT distinct Person.Name, ID, DOB FROM Person WHERE ID not in (SELECT InstructorID FROM Instructor) and  ID not in (SELECT StudentID FROM Student);

/* 21 */
SELECT distinct Count(*) as NumMentored, Person.Name FROM Person, Student WHERE Person.ID = Student.MentorID GROUP BY Name;

/*22 */
SELECT Count(*) as NumOfStudents, avg(GPA) as AvgGpa FROM Student GROUP BY Classification;

/*23 */
SELECT CourseCode, Count(Enrollment.StudentID) e  FROM Enrollment GROUP BY CourseCode ORDER BY e limit 1;

/*24*/
Select distinct Student.StudentID, MentorID from Offering, Student, Enrollment
where Offering.InstructorID = Student.MentorID and Student.StudentID = Enrollment.StudentID and Enrollment.CourseCode = Offering.CourseCode;

/*25*/
Select distinct StudentID, Person.name, CreditHours from Person, Student
Where Classification = 'Freshman' and Year(DOB) > 1975 and Person.ID = Student.StudentID;

/*26*/
Insert into Person(Name, ID, Address, DOB)
Values('Briggs Jason', '480293439', '215 North Hyland Avenue', '1975-01-15');

Insert into Student(StudentID, Classification, GPA, MentorID, CreditHours)
Values('480293439', 'Junior', 3.48, '201586985', 75);

Insert into Enrollment(CourseCode, SectionNo, StudentID, Grade)
Values('CS311' , 2, '480293439', 'A');

Insert into Enrollment(CourseCode, SectionNo, StudentID, Grade)
Values('CS330', 1, '480293439', 'A-');

Select distinct*
From Person P
Where P.Name= 'Briggs Jason';

Select distinct *
From Student S
Where S.StudentID= '480293439';

Select distinct *
From Enrollment E
Where E.StudentID = '480293439';

/*27*/
delete from Enrollment where StudentID in (select StudentID from Student where GPA<0.5);
delete from Student where GPA<0.5;
Select *
From Student S
Where S.GPA < 0.5;

/*28*/
select distinct P.Name, I.Salary from Instructor I, Person P
where I.InstructorID = P.ID and P.Name = 'Ricky Ponting';

Update Instructor
SET Salary = Salary*1.1
where InstructorID in (select P.ID from Person P where Name = 'Ricky Ponting')
and 5 <= (select count(E.StudentID) from Enrollment E, Offering O
where O.InstructorID in (select P.ID from Person P where P.Name = 'Ricky Ponting')
and E.CourseCode = O.CourseCode and E.Grade = 'A');

select distinct P.Name, I.Salary from Instructor I, Person P
where I.InstructorID = P.ID and P.Name = 'Ricky Ponting';


/*29*/
select * from Person P where P.Name = 'Trevor Horns';
insert into Person(Name, ID, Address, DOB) values('Trevor Horns', '000957303', '23 Canberra Street', '1964-11-23');
select * from Person P where P.Name = 'Trevor Horns';

/*30*/
select distinct * from Enrollment E, Student S where E.StudentID = '636596145'  and S.StudentID = '636596145';

delete from Enrollment where StudentID in (select StudentID from Student where StudentID in ( select ID from Person where Name = 'Jan Austin'));
delete from Student where StudentID in (select ID from Person where Name = 'Jan Austin');

select distinct * from Enrollment E, Student S where E.StudentID = '636596145'  and S.StudentID = '636596145';



